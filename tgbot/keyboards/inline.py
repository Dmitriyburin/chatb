from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, \
    InlineKeyboardMarkup, ForceReply


def back(btns, callback_data):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data=callback_data))
    return markup


def back_button(callback_data):
    return InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data=callback_data)


def cancel(btns, callback_data):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data=callback_data))
    return markup


def delete_mailing(btns, message_id, ):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=f'cancel:mailing2-{message_id}'))
    return markup


def generate_captcha():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–ù–æ–≤–∞—è captcha', callback_data='generate_captcha'))
    return markup


def required_sub(btns, channels):
    markup = InlineKeyboardMarkup(row_width=2)
    for index, channel in enumerate(channels):
        markup.add(InlineKeyboardButton(f'–ö–∞–Ω–∞–ª #{index + 1}', url=channel))
    markup.add(InlineKeyboardButton('üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_sub_call:channel'))
    markup.add(InlineKeyboardButton('üö´ –£–±—Ä–∞—Ç—å —Ä–µ–∫–ª–∞–º—É', callback_data='check_sub_call:vip'))
    return markup


def ban_user(btns, user_id):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(btns['ban'], callback_data=f'ban_user:{user_id}'))
    return markup


def yes_or_not(callback):
    markup = InlineKeyboardMarkup(row_width=2)
    markup.row(InlineKeyboardButton('–î–∞', callback_data=f'{callback}:yes'),
               InlineKeyboardButton('–ù–µ—Ç', callback_data=f'{callback}:no'))
    return markup


def delete(callback):
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete:{callback}'))
    return markup


def next_or_last(month, is_next=True, is_last=True):
    markup = InlineKeyboardMarkup(row_width=2)

    next_button = None
    if is_next:
        next_button = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü', callback_data=f'month:{month + 1}')

    last_button = None
    if is_last:
        last_button = InlineKeyboardButton('–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü', callback_data=f'month:{month - 1}')

    if is_next and is_last:
        markup.row(last_button, next_button)
    elif is_next:
        markup.row(next_button)
    elif is_last:
        markup.row(last_button)
    else:
        return None
    return markup


def unban(url):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–†–∞–∑–±–∞–Ω–∏—Ç—å', url=url))
    return markup


if __name__ == '__main__':
    print(aa().to_python())
